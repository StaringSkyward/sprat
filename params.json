{"name":"Sprat","tagline":"Spreadsheet API Test Runner","body":"\r\nTo run the web app:\r\n\r\n\tbundle exec rackup config.ru\r\n\r\nSee the homepage:\r\n\r\n\thttp://localhost:9292\r\n\r\n\r\nAccessing Google Spreadsheets\r\n=============================\r\n\r\nSet some environment variables to give access to Google Spreadsheets:\r\n\r\n\tGOOGLE_DRIVE_USERNAME=username for google drive spreadsheets account\r\n\tGOOGLE_DRIVE_PASSWORD=password for google drive spreadsheets account\r\n\r\n\r\nRunning background jobs\r\n=======================\r\n\r\nRun a Resque worker process to process background jobs:\r\n\r\n\tQUEUE=test_jobs bundle exec rake resque:work\r\n\r\n\r\nUsing RedisCloud\r\n================\r\n\r\nBy default, the app will use the local Redis client.\r\n\r\nTo use a RedisCloud instance, set this environment variable:\r\n\r\n\tREDISCLOUD_URL=url for redis cloud instance, e.g. redis://rediscloud:1234567890@pub-redis-15001.us-east-1-1.2.ec2.garantiadata.com:15001\r\n\r\n\r\n\r\nRunning tests from a Google Drive Spreadsheet\r\n=============================================\r\n\r\nThe spreadsheet containing tests can be hosted on Google Drive, and the test run can be triggered from the spreadsheet. \r\n\r\nResults from the result are then injected back into the spreadsheet, so users can work entirely in the spreadsheet.\r\n\r\nYou'll need to add this code to the scripts in the spreadsheet, after which a \"Test Runner\" menu option will appear:\r\n\r\n\r\n\r\n\r\n\tfunction onOpen() {\r\n\t  var ss = SpreadsheetApp.getActiveSpreadsheet();\r\n\t  var menuEntries = [ {name: \"Run tests\", functionName: \"scheduleTestJob\"} ];\r\n\t  ss.addMenu(\"Test Runner\", menuEntries);\r\n\t}\r\n\r\n\tfunction getConfigValue(name) {\r\n\t  var ws = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\r\n\t  var values = ws.getDataRange().getValues();\r\n\t  for(n=0;n<values.length;++n){\r\n\t    if (values[n][0] == name) {\r\n\t      return values[n][1];\r\n\t    }\r\n\t  }\r\n\t  return null;\r\n\t}\r\n\r\n\tfunction setConfigValue(name, value) {\r\n\t  var ws = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();\r\n\t  var values = ws.getDataRange().getValues();\r\n\t  for(n=0;n<values.length;++n){\r\n\t    if (values[n][0] == name) {\r\n\t      ws.getRange(n+1,2).setValue(value);\r\n\t    }\r\n\t  }\r\n\t}\r\n\r\n\tfunction scheduleTestJob() {\r\n\r\n\t  setConfigValue('Status', 'Scheduling..');\r\n\t  SpreadsheetApp.flush();\r\n\t  \r\n\t  var ss = SpreadsheetApp.getActiveSpreadsheet();\r\n\t  var ws = ss.getActiveSheet();\r\n\t  \r\n\t  var ssName = ss.getName();\r\n\t  var wsName = ws.getName();\r\n\t  \r\n\t  var payload =\r\n\t      {\r\n\t        \"spreadsheet\" : ssName,\r\n\t        \"worksheet\" : wsName\r\n\t      };\r\n\r\n\t  var options =\r\n\t     {\r\n\t       \"method\" : \"POST\",\r\n\t       \"payload\" : payload\r\n\t     };\r\n\t  \r\n\t  if (getConfigValue('Test Runner Auth')) {\r\n\t    var unamepass = getConfigValue('Test Runner Auth');\r\n\t    var digest = Utilities.base64Encode(unamepass);\r\n\t    var digestfull = \"Basic \" + digest;\r\n\t    options[\"headers\"] = {'Authorization': digestfull}\r\n\t  }\r\n\t  \r\n\t  var testRunnerURL = getConfigValue('Test Runner');\r\n\t  \r\n\t  var response= UrlFetchApp.fetch(testRunnerURL, options);\r\n\t  var content = response.getContentText();\r\n\r\n\t  setConfigValue('Status', 'Scheduled');\r\n\r\n\t  SpreadsheetApp.flush();\r\n\t}\r\n\r\n\r\n\r\n\r\n## Authors\r\n\r\n**Julian Higman**\r\n\r\n+ [http://twitter.com/jhigman](http://twitter.com/jhigman)\r\n+ [http://github.com/jhigman](http://github.com/jhigman)\r\n\r\n**Matt Law**\r\n\r\n+ [http://twitter.com/staringskyward](http://twitter.com/staringskyward)\r\n+ [http://github.com/staringskyward](http://github.com/staringskyward)\r\n\r\n## Copyright and license\r\n\r\nCopyright (c) 2013 Julian Higman and Matthew Law.\r\n\r\nSee {file:LICENSE.txt} for license information.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}